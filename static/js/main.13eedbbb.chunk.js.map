{"version":3,"sources":["components/Title.js","components/Feedback.js","components/Statistic.js","components/Notification.js","components/App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","el","key","type","name","onClick","Statistic","good","neutral","bad","total","positivePercentage","Notification","message","App","state","handleIcrement","e","preventDefault","target","setState","countTotalFeedbacks","i","values","length","this","percentage","Math","round","Feedback","countPositiveFeedbackPercentage","Component","defaultProps","step","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAceA,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICQUC,EAZS,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,gBAC/B,OACI,6BACKC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAE,OACxB,4BAAQC,IAAKD,EAAIE,KAAK,SAASC,KAAMH,EAAII,QAASR,GAC7CI,QCaNK,EAlBG,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,mBAC3C,OACI,oCACD,0CACG,4BACE,qCAAWJ,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,GACZ,oDACwBC,EADxB,QCPGC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAMA,ICIvBC,E,4MAKjBC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,eAAiB,SAACC,GACdA,EAAEC,iBACJpB,OAAOC,KAAK,EAAKgB,OAAOf,KAAI,SAACC,GAC3B,GAAIA,IAAOgB,EAAEE,OAAOf,KAClB,OAAO,EAAKgB,SAAL,eACJH,EAAEE,OAAOf,KAAO,EAAKW,MAAMd,GAAM,Q,EAM1CoB,oBAAsB,WAEpB,IADA,IAAIX,EAAQ,EACHY,EAAI,EAAGA,EAAIxB,OAAOyB,OAAO,EAAKR,OAAOS,OAAQF,IACpDZ,GAASZ,OAAOyB,OAAO,EAAKR,OAAOO,GAGrC,OAAOZ,G,gFAKP,IADA,IAAIA,EAAQ,EACHY,EAAI,EAAGA,EAAIxB,OAAOyB,OAAOE,KAAKV,OAAOS,OAAQF,IACpDZ,GAASZ,OAAOyB,OAAOE,KAAKV,OAAOO,GAGrC,IAAMI,EAAcD,KAAKV,MAAMR,KAAOG,EAAS,IAC/C,OAAOiB,KAAKC,MAAMF,K,+BAEV,IAAD,EACwBD,KAAKV,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACI,oCACA,kBAAC,EAAD,CAAShB,MAAM,yBACf,kBAACoC,EAAD,CAAiBjC,QAAS6B,KAAKV,MAAOlB,gBAAiB4B,KAAKT,kBAE7DS,KAAKJ,sBAAwB,kBAAC,EAAD,CAAWd,KAAMA,EAC/CC,QAASA,EACTC,IAAKA,EACLC,MAAOe,KAAKJ,sBACZV,mBAAoBc,KAAKK,oCACvB,kBAAC,EAAD,CAAcjB,QAAQ,2B,GApDCkB,aAAZjB,EACVkB,aAAe,CACpBC,KAAM,GCHZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.13eedbbb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;","import React from \"react\";\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback}) =>{\r\n    return(\r\n        <div>\r\n            {Object.keys(options).map(el =>(\r\n                <button key={el} type=\"button\" name={el} onClick={onLeaveFeedback}>\r\n                    {el}\r\n                </button>\r\n            ))}\r\n        </div> \r\n    )\r\n};\r\n\r\nexport default FeedbackOptions;","import React from \"react\";\r\n\r\nconst Statistic = ({good, neutral, bad, total, positivePercentage}) =>{\r\n    return(\r\n        <>\r\n       <h3>Statistics</h3>\r\n          <ul>\r\n            <li>Good: {good}</li>\r\n            <li>Neutral: {neutral}</li>\r\n            <li>Bad: {bad}</li>\r\n            <li>Total: {total}</li>\r\n            <li>\r\n              Posititve feedbacks: {positivePercentage}%\r\n            </li>\r\n          </ul>\r\n          </>\r\n    )\r\n};\r\n\r\n\r\nexport default Statistic;","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => <div>{message}</div>;\r\n\r\nexport default Notification;","import React, { Component } from \"react\";\r\nimport Section from \"./Title.js\";\r\nimport FeedbackOptions from './Feedback.js';\r\nimport Statistic from \"./Statistic.js\";\r\nimport Notification from './Notification.js';\r\n\r\nexport default class App extends Component {\r\n    static defaultProps = {\r\n      step: 1,\r\n    };\r\n  \r\n    state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0,\r\n    };\r\n  \r\n    handleIcrement = (e) => {\r\n        e.preventDefault();\r\n      Object.keys(this.state).map((el) => {\r\n        if (el === e.target.name) {\r\n          return this.setState({\r\n            [e.target.name]: this.state[el] + 1,\r\n          });\r\n        }\r\n      });\r\n    };\r\n  \r\n    countTotalFeedbacks = ()=> {\r\n      let total = 0;\r\n      for (let i = 0; i < Object.values(this.state).length; i++) {\r\n        total += Object.values(this.state)[i];\r\n      }\r\n\r\n      return total;\r\n    }\r\n  \r\n    countPositiveFeedbackPercentage() {\r\n      let total = 0;\r\n      for (let i = 0; i < Object.values(this.state).length; i++) {\r\n        total += Object.values(this.state)[i];\r\n      }\r\n  \r\n      const percentage = (this.state.good / total) * 100;\r\n      return Math.round(percentage);\r\n    }\r\n    render() {\r\n      const { good, neutral, bad } = this.state;\r\n      return (\r\n          <>\r\n          <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions options={this.state} onLeaveFeedback={this.handleIcrement}/>\r\n        </Section>\r\n        {this.countTotalFeedbacks() ? <Statistic good={good}\r\n        neutral={neutral}\r\n        bad={bad}\r\n        total={this.countTotalFeedbacks()}\r\n        positivePercentage={this.countPositiveFeedbackPercentage()} />:\r\n          <Notification message=\"No feedback given\" />}\r\n        </>\r\n      );\r\n    }\r\n  };  \r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}